

import { GoogleGenAI } from "@google/genai";
import { backendService } from './backendService';
import type { PointOfInterest, User, ChatMessage } from '../types';

const API_KEY = process.env.API_KEY;

// A more robust check for a valid key. A typical Google API key is ~39 characters.
const isApiKeyValid = API_KEY && API_KEY.length > 30;

if (!isApiKeyValid) {
  console.warn("API_KEY environment variable not set or is invalid. Gemini API calls will be simulated.");
}

const ai = isApiKeyValid ? new GoogleGenAI({ apiKey: API_KEY! }) : null;


export const askAIGuideStream = async (locationName: string, question: string) => {
  if (!ai) {
    // Simulate a response if API key is not available or invalid
    const simulatedResponse = `Desculpe, meu c√©rebro de IA est√° offline no momento. Mas tenho certeza que ${locationName} √© incr√≠vel! Tente perguntar a um guia local.`;
    
    async function* streamGenerator() {
        for (const word of simulatedResponse.split(' ')) {
            await new Promise(res => setTimeout(res, 50));
            yield { text: word + ' ' };
        }
    }
    return streamGenerator();
  }

  const prompt = `Voc√™ √© um guia tur√≠stico amig√°vel e experiente de Ca√ßapava do Sul, Brasil. Um turista est√° visitando "${locationName}" e tem uma pergunta. Responda de forma concisa, √∫til e calorosa. Pergunta: "${question}"`;

  try {
    const response = await ai.models.generateContentStream({
      model: "gemini-2.5-flash",
      contents: prompt,
    });
    return response;
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    async function* errorStreamGenerator() {
      yield { text: "Ocorreu um erro ao contatar o guia de IA. Por favor, tente novamente mais tarde." };
    }
    return errorStreamGenerator();
  }
};

interface ItineraryPreferences {
    duration: string;
    interests: string[];
    pace: string;
    notes: string;
}

export const generateItinerary = async (preferences: ItineraryPreferences): Promise<string> => {
    if (!ai) {
        return Promise.resolve("Modo de demonstra√ß√£o: A API do Gemini n√£o est√° configurada. Aqui est√° um exemplo de roteiro:\n\n### Dia 1: Aventura e Natureza\n\n**Manh√£:**\n- **Pedra do Segredo:** Comece o dia com uma trilha leve e aprecie a vista incr√≠vel deste famoso ponto tur√≠stico.\n\n**Tarde:**\n- **Guaritas:** Explore as forma√ß√µes rochosas que parecem castelos. √ìtimo para fotos!\n\n**Noite:**\n- **Churrascaria Rodeio:** Termine o dia com um aut√™ntico churrasco ga√∫cho.");
    }

    // Helper to categorize POIs for better matching
    const getPoiType = (poi: PointOfInterest): string => {
        const name = poi.name.toLowerCase();
        if (name.includes('pedra') || name.includes('guaritas') || name.includes('cascata')) return 'Natureza, Aventura';
        if (name.includes('forte') || name.includes('igreja') || name.includes('casa de ulh√¥a')) return 'Hist√≥ria, Cultura Local';
        if (name.includes('minas')) return 'Hist√≥ria, Aventura';
        if (name.includes('churrascaria') || name.includes('do√ßaria')) return 'Gastronomia';
        return 'Geral';
    }
    
    // Fetch POIs from the backend instead of using static constants
    const pointsOfInterest = await backendService.getPointsOfInterest();

    const poiList = pointsOfInterest.map(poi => 
        `- ${poi.name}: ${poi.description} (Tipo: ${getPoiType(poi)})`
    ).join('\n');

    const prompt = `
        Voc√™ √© um guia tur√≠stico especialista e criativo para a cidade de Ca√ßapava do Sul, no Brasil.
        Sua tarefa √© criar um roteiro de viagem personalizado e detalhado, baseado nas prefer√™ncias de um turista.

        **Contexto - Pontos de Interesse Dispon√≠veis:**
        Aqui est√° uma lista dos pontos de interesse em Ca√ßapava do Sul que voc√™ DEVE usar como base para suas recomenda√ß√µes. N√£o invente lugares que n√£o est√£o nesta lista.
        ${poiList}

        **Prefer√™ncias do Turista:**
        - **Dura√ß√£o da Viagem:** ${preferences.duration}
        - **Principais Interesses:** ${preferences.interests.join(', ')}
        - **Ritmo Desejado:** ${preferences.pace}
        - **Observa√ß√µes Adicionais:** ${preferences.notes || 'Nenhuma.'}

        **Sua Tarefa:**
        1.  Crie um roteiro dia a dia, se a dura√ß√£o for maior que um dia.
        2.  Use os pontos de interesse da lista fornecida que melhor se encaixam nos interesses do turista.
        3.  Organize as atividades de forma l√≥gica (manh√£, tarde, noite) e considere o ritmo solicitado.
        4.  Para cada sugest√£o, escreva um par√°grafo curto e envolvente, explicando por que o local √© uma boa escolha e o que o turista pode fazer l√°.
        5.  O tom deve ser amig√°vel, acolhedor e inspirador.
        6.  Retorne a resposta em formato **Markdown**, usando t√≠tulos (##, ###) para os dias e negrito (**) para os nomes dos locais.

        Comece o roteiro com um t√≠tulo criativo.
    `;
    
    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: prompt,
        });
        return response.text;
    } catch (error) {
        console.error("Error calling Gemini API for itinerary:", error);
        throw new Error("Ocorreu um erro ao contatar o guia de IA. Por favor, tente novamente mais tarde.");
    }
};


export const getAIChatResponse = async (history: ChatMessage[], user: User): Promise<string> => {
    if (!ai) {
        return "Desculpe, meu c√©rebro de IA est√° offline. N√£o consigo conversar agora.";
    }

    const pointsOfInterest = await backendService.getPointsOfInterest();
    const poiList = pointsOfInterest.map(poi => `- ${poi.name}: ${poi.description}`).join('\n');
    
    const visitedPoiObjects = await Promise.all(
        user.visited.map(visit => backendService.getPointOfInterestById(visit.pointId))
    );
    const visitedPoisText = visitedPoiObjects
        .filter(poi => poi !== null)
        .map(poi => poi!.name)
        .join(', ');

    const systemInstruction = `
        Voc√™ √© 'Cac√°', o assistente virtual amig√°vel e especialista do aplicativo "Visite Ca√ßapava do Sul".
        Sua personalidade √© calorosa, prestativa e um pouco divertida.
        Seu objetivo √© ajudar os turistas a aproveitarem ao m√°ximo a cidade e o aplicativo.

        **Seu Conhecimento:**
        1.  **Sobre a Cidade:** Voc√™ conhece todos os pontos tur√≠sticos listados abaixo. Use essa lista como sua √∫nica fonte de verdade para locais. N√£o invente lugares.
        2.  **Sobre o App:** Voc√™ entende o sistema de gamifica√ß√£o (pontos, badges, ranking). Check-in em um local d√° pontos. Completar rotas e visitar locais espec√≠ficos d√° badges (conquistas).
        3.  **Sobre o Usu√°rio:** Voc√™ est√° conversando com ${user.name}. Ele(a) tem ${user.points} pontos e j√° visitou os seguintes locais: ${visitedPoisText || 'Nenhum'}. Use essa informa√ß√£o para personalizar suas respostas.

        **Lista de Pontos Tur√≠sticos Dispon√≠veis:**
        ${poiList}

        **Regras de Conversa:**
        - Seja conciso e direto.
        - Use emojis para deixar a conversa mais leve. üòâ
        - Se n√£o souber a resposta, admita e sugira onde o usu√°rio pode encontrar a informa√ß√£o.
        - Sempre incentive o usu√°rio a explorar a cidade.
    `;
    
    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: history,
            config: {
                systemInstruction,
            }
        });

        return response.text;
    } catch (error) {
        console.error("Error calling Gemini API for chat:", error);
        return "Oops! Tive um pequeno curto-circuito. üòµ Poderia tentar perguntar de novo?";
    }
};
